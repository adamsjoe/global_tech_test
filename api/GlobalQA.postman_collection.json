{
	"info": {
		"_postman_id": "7bdf5e53-5a6a-4245-ba4d-00a0bde861b6",
		"name": "GlobalQA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_getAllLaunches",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// check mission name is not empty",
							"pm.test('Check Mission Name is not empty', () => {",
							"    var data = pm.response.json().data.launches;",
							"",
							"    // checkEmpty = data.filter((data) => _.isEqual(data[\"mission_name\"], []))",
							"    checkEmpty = data.filter(name => name[\"mission_name\"] == \"\")",
							"    pm.expect(checkEmpty, JSON.stringify(checkEmpty)).to.be.empty",
							"});",
							"",
							"// check that number of launches is greater than 0",
							"pm.test('Check that number of launches is greater than 0', () => {",
							"    var data = pm.response.json().data.launches;",
							"    pm.expect(data.length).to.be.above(0)",
							"});",
							"",
							"// check the number of ships is greater than 0",
							"// fails as there are 31 launches without ships",
							"pm.test('Check Number of ships is greater than 0', () => {",
							"    var data = pm.response.json().data.launches;",
							"",
							"    checkShips = data.filter(name => name[\"ships\"] == 0)",
							"    pm.expect(checkShips.length, JSON.stringify(checkShips)).to.equal(0)",
							"",
							"});",
							"",
							"// check that first and second stage are not null",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query launches {\r\n  launches {\r\n    id\r\n    mission_name\r\n    ships {\r\n      name\r\n    }\r\n  }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://api.spacex.land/graphql/",
					"protocol": "https",
					"host": [
						"api",
						"spacex",
						"land"
					],
					"path": [
						"graphql",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "2_updateLimitParam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// check mission name is not empty\r",
							"pm.test('Check Mission Name is not empty', () => {\r",
							"    var data = pm.response.json().data.launches;\r",
							"\r",
							"    // checkEmpty = data.filter((data) => _.isEqual(data[\"mission_name\"], []))\r",
							"    checkEmpty = data.filter(name => name[\"mission_name\"] == \"\")\r",
							"    pm.expect(checkEmpty, JSON.stringify(checkEmpty)).to.be.empty\r",
							"});\r",
							"\r",
							"// check that number of launches is greater than 0\r",
							"pm.test('Check that number of launches is greater than 0', () => {\r",
							"    var data = pm.response.json().data.launches;\r",
							"    pm.expect(data.length).to.be.above(0)\r",
							"});\r",
							"\r",
							"// check the number of ships is greater than 0\r",
							"// fails as there are 31 launches without ships\r",
							"pm.test('Check Number of ships is greater than 0', () => {\r",
							"    var data = pm.response.json().data.launches;\r",
							"\r",
							"    checkShips = data.filter(name => name[\"ships\"] == 0)\r",
							"    pm.expect(checkEmpty, JSON.stringify(checkShips)).to.be.above(0)\r",
							"});\r",
							"\r",
							"// check that number of launches is 2\r",
							"pm.test('Check that number of launches is 2 (current gql variable)', () => {\r",
							"    var data = pm.response.json().data.launches;\r",
							"    pm.expect(data.length).to.equal(2)\r",
							"});\r",
							"\r",
							"// check that first and second stage are not null\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ($limit: Int!) {\r\n  launches(limit: $limit) {\r\n    id\r\n    mission_name\r\n    ships {\r\n      name\r\n    }\r\n  }\r\n}\r\n",
						"variables": "{\r\n    \"limit\": 2\r\n}"
					}
				},
				"url": {
					"raw": "https://api.spacex.land/graphql/",
					"protocol": "https",
					"host": [
						"api",
						"spacex",
						"land"
					],
					"path": [
						"graphql",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "3_updateOffsetParam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// check mission name is not empty\r",
							"pm.test('Check Mission Name is not empty', () => {\r",
							"    var data = pm.response.json().data.launches;\r",
							"\r",
							"    // checkEmpty = data.filter((data) => _.isEqual(data[\"mission_name\"], []))\r",
							"    checkEmpty = data.filter(name => name[\"mission_name\"] == \"\")\r",
							"    pm.expect(checkEmpty, JSON.stringify(checkEmpty)).to.be.empty\r",
							"});\r",
							"\r",
							"// check that number of launches is greater than 0\r",
							"pm.test('Check that number of launches is greater than 0', () => {\r",
							"    var data = pm.response.json().data.launches;\r",
							"    pm.expect(data.length).to.be.above(0)\r",
							"});\r",
							"\r",
							"// check the number of ships is greater than 0\r",
							"// fails as there are 31 launches without ships\r",
							"pm.test('Check Number of ships is greater than 0', () => {\r",
							"    var data = pm.response.json().data.launches;\r",
							"\r",
							"    checkShips = data.filter(name => name[\"ships\"] == 0)\r",
							"    pm.expect(checkEmpty, JSON.stringify(checkShips)).to.be.above(0)\r",
							"});\r",
							"\r",
							"// check that number of launches is 100\r",
							"pm.test('Check that number of launches is 100 (111 at present minus gql variable)', () => {\r",
							"    var data = pm.response.json().data.launches;\r",
							"    pm.expect(data.length).to.equal(100)\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var resultsBeforeOffset = 0;\r",
							"\r",
							"// const gqlQuery = {\r",
							"//     url: 'https://api.spacex.land/graphql/',\r",
							"//     method: 'POST',\r",
							"//     header: {\r",
							"//         'content-type': 'application/json',\r",
							"//         },\r",
							"//     body: JSON.stringify({\r",
							"//         query: 'query  { launches { id mission_name ships {  name } } }'        \r",
							"//     })\r",
							"// };\r",
							" \r",
							"\r",
							"//  pm.sendRequest(gqlQuery, function(err, response) {\r",
							"//     pm.expect(response.code).to.eql(200);\r",
							"    \r",
							"//     console.log(response)\r",
							"//     // pm.variables.set(\"resultsBeforeOffset\", response.json().length);\r",
							"//     // console.log(\"There are \" + pm.variables.get(\"resultsBeforeOffset\") + \" results before offset.\"); \r",
							"//  });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ($offset: Int!) {\r\n  launches(offset: $offset) {\r\n    id\r\n    mission_name\r\n    ships {\r\n      name\r\n    }\r\n  }\r\n}\r\n",
						"variables": "{\r\n    \"offset\": 11\r\n}"
					}
				},
				"url": {
					"raw": "https://api.spacex.land/graphql/",
					"protocol": "https",
					"host": [
						"api",
						"spacex",
						"land"
					],
					"path": [
						"graphql",
						""
					]
				}
			},
			"response": []
		}
	]
}